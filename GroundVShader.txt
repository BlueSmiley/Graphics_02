#version 330

// can be substituted for normal vertex shader but doesn't actually use the bone data

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 tex_coord;

out vec3 fragment_color, position_eye, normal_eye, FragPos, world_normal;
out vec2 texCoord;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

void main() {

	texCoord = tex_coord;

	mat4 ModelViewMatrix = view * model;
	// Position in view space
	position_eye = vec3(ModelViewMatrix* vec4(vertex_position, 1.0));
	FragPos = vec3(model *vec4(vertex_position,1.0));

	// normal calculations
	mat3 NormalMatrix = mat3(transpose(inverse(ModelViewMatrix)));
	// Convert normal and position to eye coords
	// Normal in view space
	vec4 tempNormals =  vec4(vertex_normal, 1.0);
	normal_eye = NormalMatrix  * tempNormals.xyz;

	world_normal = normalize(mat3(model) *vertex_normal);

	// Convert position to clip coordinates and pass along
	gl_Position = proj * vec4(position_eye, 1.0);
}